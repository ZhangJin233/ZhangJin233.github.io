<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>leetcode on jane&#39;s blog</title>
    <link>https://jane-dev.com/tags/leetcode/</link>
    <description>Recent content in leetcode on jane&#39;s blog</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-gb</language>
    <copyright>&lt;a href=&#34;https://creativecommons.org/licenses/by-nc/4.0/&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;CC BY-NC 4.0&lt;/a&gt;</copyright>
    <lastBuildDate>Thu, 02 May 2019 16:57:08 +0800</lastBuildDate>
    
	<atom:link href="https://jane-dev.com/tags/leetcode/janes-blog.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>Happy Number</title>
      <link>https://jane-dev.com/technology/HappyNumber/</link>
      <pubDate>Thu, 02 May 2019 16:57:08 +0800</pubDate>
      
      <guid>https://jane-dev.com/technology/HappyNumber/</guid>
      <description>Write an algorithm to determine if a number is &amp;ldquo;happy&amp;rdquo;. A happy number is defined by the following process: Starting with any positive integer, replace the number by the sum of the squares of its digits in base-ten, and repeat the process until the number either equals 1 (where it will stay), or it loops endlessly in a cycle that does not include 1. Those numbers for which this process</description>
    </item>
    
    <item>
      <title>Two sum</title>
      <link>https://jane-dev.com/technology/TwoSum/</link>
      <pubDate>Wed, 01 May 2019 16:57:08 +0800</pubDate>
      
      <guid>https://jane-dev.com/technology/TwoSum/</guid>
      <description>&lt;p&gt;Given an array of integers, return indices of the two numbers such that they add up to a specific target.&lt;/p&gt;

&lt;p&gt;You may assume that each input would have exactly one solution, and you may not use the same element twice.&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>Count Prime</title>
      <link>https://jane-dev.com/technology/CountPrime/</link>
      <pubDate>Tue, 16 Apr 2019 16:57:08 +0800</pubDate>
      
      <guid>https://jane-dev.com/technology/CountPrime/</guid>
      <description>Count the number of prime numbers less than a non-negative number, n. Example: Input: 10 Output: 4 Explanation: There are 4 prime numbers less than 10, they are 2, 3, 5, 7. solution 1: class Solution { public int countPrimes(int n) { boolean[] prime = new boolean[n]; Arrays.fill(prime, true); for(int i = 2; i &amp;lt; n; i++){ if(prime[i]){ // 将i的2倍、3倍、4倍</description>
    </item>
    
    <item>
      <title>SingleNumber</title>
      <link>https://jane-dev.com/technology/SingleNumber/</link>
      <pubDate>Mon, 01 Apr 2019 16:57:08 +0800</pubDate>
      
      <guid>https://jane-dev.com/technology/SingleNumber/</guid>
      <description>Given a non-empty array of integers, every element appears twice except for one. Find that single one. Note: Your algorithm should have a linear runtime complexity. Could you implement it without using extra memory? Example 1: Input: [2,2,1] Output: 1 Example 2: Input: [4,1,2,1,2] Output: 4 solution 1: hashmap class Solution { public int singleNumber(int[] nums) { if(nums == null || nums.length == 0){ return 0; } HashMap&amp;lt;Integer,Integer&amp;gt; map =</description>
    </item>
    
  </channel>
</rss>